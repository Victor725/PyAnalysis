[
    {
        "file_path": "examples\\pyfunc\\model_as_code.py",
        "scope": "AIModel.predict",
        "lineno": 20,
        "args": [
            "self",
            "context",
            "model_input"
        ],
        "summarize": "The function processes a list of inputs, sends each to an AI model to get a response, and returns the responses in a DataFrame.",
        "potential_vul_types": [
            "XSS: 0.7279999852180481",
            "XSS: 0.7170000076293945",
            "XSS: 0.7080000042915344",
            "CommandInjection: 0.7059999704360962",
            "XSS: 0.6899999976158142",
            "CommandInjection: 0.6890000104904175",
            "XSS: 0.6880000233650208",
            "SQLInjection: 0.6859999895095825"
        ]
    },
    {
        "file_path": "examples\\pyfunc\\model_as_code.py",
        "scope": "AIModel.get_open_ai_model_response",
        "lineno": 32,
        "args": [
            "self",
            "user_input"
        ],
        "summarize": "The function sends user input to an OpenAI model to generate a chat completion response.",
        "potential_vul_types": [
            "XSS: 0.7760000228881836",
            "SQLInjection: 0.7720000147819519",
            "CommandInjection: 0.765999972820282",
            "XSS: 0.7620000243186951",
            "XSS: 0.746999979019165",
            "CommandInjection: 0.7459999918937683",
            "CommandInjection: 0.7450000047683716",
            "PathTraversal: 0.7419999837875366"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.get_endpoint",
        "lineno": 293,
        "args": [
            "endpoint_name"
        ],
        "summarize": "The function retrieves and returns the details of a specified endpoint if it exists; otherwise, it raises an error indicating that the endpoint is not found or inactive.",
        "potential_vul_types": [
            "SQLInjection: 0.7070000171661377",
            "SQLInjection: 0.6859999895095825",
            "XSS: 0.6759999990463257",
            "PathTraversal: 0.675000011920929",
            "SQLInjection: 0.6729999780654907",
            "XSS: 0.6710000038146973",
            "SQLInjection: 0.6650000214576721",
            "XSS: 0.6620000004768372"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.get_route",
        "lineno": 304,
        "args": [
            "route_name"
        ],
        "summarize": "This function handles HTTP GET requests to retrieve a dynamic route by its name. If the route is found, it returns the route; otherwise, it raises a 404 HTTP exception indicating the route is not present or active.",
        "potential_vul_types": [
            "XSS: 0.7329999804496765",
            "XSS: 0.6850000023841858",
            "PathTraversal: 0.6840000152587891",
            "XSS: 0.6790000200271606",
            "PathTraversal: 0.6729999780654907",
            "SQLInjection: 0.6710000038146973",
            "XSS: 0.6690000295639038",
            "XSS: 0.6639999747276306"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.list_endpoints",
        "lineno": 316,
        "args": [
            "page_token"
        ],
        "summarize": "The function retrieves a paginated list of endpoints, optionally starting from a specified page token, and returns the endpoints along with a token for the next page if more endpoints are available.",
        "potential_vul_types": [
            "XSS: 0.6729999780654907",
            "XSS: 0.671999990940094",
            "XSS: 0.6639999747276306",
            "CommandInjection: 0.656000018119812",
            "XSS: 0.6439999938011169",
            "XSS: 0.640999972820282",
            "XSS: 0.6399999856948853",
            "PathTraversal: 0.6380000114440918"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.search_routes",
        "lineno": 331,
        "args": [
            "page_token"
        ],
        "summarize": "This function retrieves a paginated list of dynamic routes, optionally using a page token to determine the starting point, and returns the current page of routes along with a token for the next page if more routes are available.",
        "potential_vul_types": [
            "XSS: 0.6850000023841858",
            "XSS: 0.6570000052452087",
            "XSS: 0.6499999761581421",
            "PathTraversal: 0.6430000066757202",
            "XSS: 0.6380000114440918",
            "XSS: 0.6370000243186951",
            "XSS: 0.6349999904632568",
            "SQLInjection: 0.6309999823570251"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.openai_chat_handler",
        "lineno": 365,
        "args": [
            "request",
            "payload"
        ],
        "summarize": "The function handles chat completion requests by validating the endpoint type and interacting with a provider to process or stream chat data based on the request payload.",
        "potential_vul_types": [
            "SQLInjection: 0.7739999890327454",
            "XSS: 0.7080000042915344",
            "CommandInjection: 0.7070000171661377",
            "PathTraversal: 0.7059999704360962",
            "PathTraversal: 0.7049999833106995",
            "XSS: 0.7039999961853027",
            "XSS: 0.699999988079071",
            "XSS: 0.699999988079071"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.openai_completions_handler",
        "lineno": 383,
        "args": [
            "request",
            "payload"
        ],
        "summarize": "The function handles POST requests to a specific endpoint, processes the request payload to determine the appropriate route and provider, and then generates a response based on whether the request is for a streaming or non-streaming completion.",
        "potential_vul_types": [
            "SQLInjection: 0.7770000100135803",
            "PathTraversal: 0.7730000019073486",
            "CommandInjection: 0.7599999904632568",
            "XSS: 0.7599999904632568",
            "XSS: 0.7590000033378601",
            "PathTraversal: 0.7580000162124634",
            "XSS: 0.7580000162124634",
            "XSS: 0.753000020980835"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\app.py",
        "scope": "create_app_from_config.openai_embeddings_handler",
        "lineno": 401,
        "args": [
            "request",
            "payload"
        ],
        "summarize": "The function processes an incoming HTTP POST request to generate embeddings based on the provided model type, verifies if the endpoint is valid for embeddings, and interacts with a provider to obtain the embeddings.",
        "potential_vul_types": [
            "PathTraversal: 0.7329999804496765",
            "CommandInjection: 0.7170000076293945",
            "SQLInjection: 0.7170000076293945",
            "XSS: 0.7170000076293945",
            "XSS: 0.7129999995231628",
            "XSS: 0.7110000252723694",
            "XSS: 0.7039999961853027",
            "CommandInjection: 0.7039999961853027"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\openai.py",
        "scope": "OpenAIProvider",
        "lineno": 245,
        "args": [],
        "summarize": "The `OpenAIProvider` class is designed to interact with OpenAI's API. It initializes with configuration settings and validates them. The `base_url` property constructs the API base URL based on the configuration. The `headers` property generates the appropriate HTTP headers for API requests. The `adapter_class` property returns the adapter class used for converting payloads.\n\nThe `get_endpoint_url` method constructs endpoint URLs for different route types. The `chat_stream` method streams chat responses asynchronously, processing chunks of data from the API. The `_chat` method sends chat requests and returns responses. The `_chat_uc_function` method handles chat requests with user-defined functions and executes them as needed. The `chat` method determines which chat method to use based on a feature flag.\n\nThe `completions_stream` method streams completion responses asynchronously, while the `completions` method sends requests for completions and processes responses. The `embeddings` method sends requests for embeddings and processes the returned data.",
        "potential_vul_types": [
            "SQLInjection: 0.7609999775886536",
            "SQLInjection: 0.7580000162124634",
            "SQLInjection: 0.7360000014305115",
            "PathTraversal: 0.7310000061988831",
            "CommandInjection: 0.7200000286102295",
            "XSS: 0.7139999866485596",
            "XSS: 0.7120000123977661",
            "XSS: 0.7110000252723694"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\anthropic.py",
        "scope": "AnthropicProvider",
        "lineno": 228,
        "args": [],
        "summarize": "The class `AnthropicProvider` is designed to interact with the Anthropic API. It initializes with a configuration object, validates it, and provides properties for API headers and base URL. It includes methods to construct endpoint URLs based on route types. The `chat_stream` method asynchronously processes streaming chat messages, handling different message types and yielding transformed responses. The `chat` method sends chat requests and returns processed responses. The `completions` method sends completion requests and returns processed responses.",
        "potential_vul_types": [
            "SQLInjection: 0.7279999852180481",
            "PathTraversal: 0.7099999785423279",
            "SQLInjection: 0.7089999914169312",
            "XSS: 0.6970000267028809",
            "SQLInjection: 0.6970000267028809",
            "PathTraversal: 0.6869999766349792",
            "CommandInjection: 0.6830000281333923",
            "CommandInjection: 0.6819999814033508"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\cohere.py",
        "scope": "CohereProvider",
        "lineno": 325,
        "args": [],
        "summarize": "The class `CohereProvider` is designed to interact with the Cohere API. It initializes with a configuration object and provides methods to construct request headers and URLs. It offers asynchronous methods for handling chat, completions, and embeddings requests, either in a streaming or non-streaming manner, by transforming request payloads and processing responses through the `CohereAdapter`.",
        "potential_vul_types": [
            "SQLInjection: 0.6740000247955322",
            "SQLInjection: 0.6660000085830688",
            "SQLInjection: 0.6650000214576721",
            "PathTraversal: 0.6639999747276306",
            "XSS: 0.6570000052452087",
            "PathTraversal: 0.6539999842643738",
            "XSS: 0.6439999938011169",
            "XSS: 0.6320000290870667"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\ai21labs.py",
        "scope": "AI21LabsProvider",
        "lineno": 10,
        "args": [],
        "summarize": "The class `AI21LabsProvider` is designed to interface with the AI21 Labs API. It initializes with a configuration that includes an API key and sets up the necessary headers and base URL for making requests. The `completions` method processes a request payload, validates and renames certain parameters, and sends an asynchronous request to the AI21 Labs API to generate text completions. It then constructs and returns a response object containing the generated text and related metadata.",
        "potential_vul_types": [
            "SQLInjection: 0.7129999995231628",
            "XSS: 0.7080000042915344",
            "SQLInjection: 0.7080000042915344",
            "SQLInjection: 0.7070000171661377",
            "PathTraversal: 0.6970000267028809",
            "PathTraversal: 0.6959999799728394",
            "CommandInjection: 0.6949999928474426",
            "XSS: 0.6919999718666077"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\mosaicml.py",
        "scope": "MosaicMLProvider",
        "lineno": 13,
        "args": [],
        "summarize": "The class `MosaicMLProvider` is a service provider for interacting with MosaicML's API. It initializes with a configuration and performs various tasks related to model inference. The `_request` method sends HTTP requests to MosaicML's API. The `_parse_chat_messages_to_prompt` method formats chat messages into a prompt string. The `chat` method processes chat payloads, formats them into a request, and handles responses for chat-based interactions. The `completions` method processes completion payloads, prepares requests for text completion, and handles the response. The `embeddings` method handles embedding payloads, prepares requests for text embeddings, and processes the response.",
        "potential_vul_types": [
            "SQLInjection: 0.7260000109672546",
            "SQLInjection: 0.7239999771118164",
            "SQLInjection: 0.7099999785423279",
            "XSS: 0.7070000171661377",
            "CommandInjection: 0.6880000233650208",
            "PathTraversal: 0.6830000281333923",
            "XSS: 0.6800000071525574",
            "XSS: 0.6740000247955322"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\palm.py",
        "scope": "PaLMProvider",
        "lineno": 11,
        "args": [],
        "summarize": "The class `PaLMProvider` facilitates interaction with the PaLM API for generating chat responses, text completions, and text embeddings. It initializes with a configuration, validates input parameters, maps and renames payload keys as needed, and sends requests to the API. The `chat` method processes chat messages and returns structured chat responses. The `completions` method handles text completion requests and returns generated text. The `embeddings` method processes requests for text embeddings and returns the corresponding embeddings data.",
        "potential_vul_types": [
            "SQLInjection: 0.75",
            "SQLInjection: 0.6959999799728394",
            "SQLInjection: 0.6899999976158142",
            "SQLInjection: 0.6830000281333923",
            "XSS: 0.6800000071525574",
            "XSS: 0.6779999732971191",
            "SQLInjection: 0.6740000247955322",
            "SQLInjection: 0.6629999876022339"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\gemini.py",
        "scope": "GeminiProvider",
        "lineno": 335,
        "args": [],
        "summarize": "The `GeminiProvider` class is designed to interface with the Gemini API, handling requests and responses for generating embeddings, completions, and chat interactions. It initializes with a configuration object, validates the config type, and sets up necessary API headers. The class provides methods to send requests to specific API endpoints for embeddings, completions, and chat, converting request payloads to the appropriate format and processing the responses. It supports batch processing for embeddings and includes placeholders for future streaming capabilities in completions and chat methods.",
        "potential_vul_types": [
            "SQLInjection: 0.7089999914169312",
            "SQLInjection: 0.7089999914169312",
            "SQLInjection: 0.6710000038146973",
            "SQLInjection: 0.6690000295639038",
            "CommandInjection: 0.6660000085830688",
            "CommandInjection: 0.6650000214576721",
            "PathTraversal: 0.6539999842643738",
            "XSS: 0.6460000276565552"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\mlflow.py",
        "scope": "MlflowModelServingProvider",
        "lineno": 53,
        "args": [],
        "summarize": "The class `MlflowModelServingProvider` is designed to interface with an MLflow model server, providing methods to handle different types of requests:\n\n- `__init__`: Initializes the provider with configuration details, ensuring the configuration is valid for MLflow model serving.\n- `_extract_mlflow_response_key`: Validates and extracts a specific key from the MLflow server response.\n- `_process_payload`: Converts the input payload into a format suitable for MLflow requests.\n- `_process_completions_response_for_mlflow_serving`: Processes and formats the completion response from the MLflow server.\n- `completions`: Asynchronously sends a request to the MLflow server for text completion and processes the response.\n- `_process_chat_response_for_mlflow_serving`: Processes and formats the chat response from the MLflow server.\n- `chat`: Asynchronously sends a request to the MLflow server for chat interaction and processes the response.\n- `_process_embeddings_response_for_mlflow_serving`: Processes and formats the embeddings response from the MLflow server.\n- `embeddings`: Asynchronously sends a request to the MLflow server for embeddings and processes the response.",
        "potential_vul_types": [
            "XSS: 0.7689999938011169",
            "XSS: 0.7170000076293945",
            "SQLInjection: 0.7080000042915344",
            "XSS: 0.6940000057220459",
            "SQLInjection: 0.6919999718666077",
            "XSS: 0.6850000023841858",
            "SQLInjection: 0.6830000281333923",
            "PathTraversal: 0.671999990940094"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\bedrock.py",
        "scope": "AmazonBedrockProvider",
        "lineno": 170,
        "args": [],
        "summarize": "The class initializes and configures a client for interacting with Amazon Bedrock services. It manages session credentials and handles client creation, expiration, and request invocation. It provides methods for converting requests and responses between internal and external representations and includes error handling for client interaction.",
        "potential_vul_types": [
            "SQLInjection: 0.6790000200271606",
            "XSS: 0.6679999828338623",
            "SQLInjection: 0.6669999957084656",
            "PathTraversal: 0.6589999794960022",
            "XSS: 0.6539999842643738",
            "SQLInjection: 0.652999997138977",
            "SQLInjection: 0.6510000228881836",
            "XSS: 0.6470000147819519"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\huggingface.py",
        "scope": "HFTextGenerationInferenceServerProvider",
        "lineno": 14,
        "args": [],
        "summarize": "The class `HFTextGenerationInferenceServerProvider` is designed to interact with a text generation inference server provided by Hugging Face. It validates the configuration upon initialization, prepares and sends requests to the server for text generation based on input payloads, and processes the server's response to return formatted completion results.",
        "potential_vul_types": [
            "SQLInjection: 0.7089999914169312",
            "SQLInjection: 0.6729999780654907",
            "XSS: 0.6700000166893005",
            "PathTraversal: 0.6679999828338623",
            "XSS: 0.6660000085830688",
            "SQLInjection: 0.6589999794960022",
            "CodeInjection: 0.6570000052452087",
            "SQLInjection: 0.652999997138977"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\mistral.py",
        "scope": "MistralProvider",
        "lineno": 150,
        "args": [],
        "summarize": "The class initializes with a configuration and validates it. It provides headers for authentication, a base URL for API requests, and specifies an adapter class. It constructs an endpoint URL based on the route type. It asynchronously sends requests to the API and processes responses for chat completions and embeddings, ensuring the payload is correctly formatted and validated.",
        "potential_vul_types": [
            "XSS: 0.7390000224113464",
            "PathTraversal: 0.7319999933242798",
            "SQLInjection: 0.7269999980926514",
            "SQLInjection: 0.7149999737739563",
            "XSS: 0.7129999995231628",
            "SQLInjection: 0.7120000123977661",
            "XSS: 0.7080000042915344",
            "XSS: 0.7039999961853027"
        ]
    },
    {
        "file_path": "mlflow\\gateway\\providers\\togetherai.py",
        "scope": "TogetherAIProvider",
        "lineno": 293,
        "args": [],
        "summarize": "The class `TogetherAIProvider` is designed to interact with the TogetherAI API. It initializes with a configuration and provides methods for constructing API request URLs, setting headers, and sending requests. The methods include functionalities for making requests to generate embeddings, completions, and chat responses, both in regular and streaming formats. The class also handles the transformation of request and response payloads between internal representations and the formats expected by the TogetherAI API.",
        "potential_vul_types": [
            "SQLInjection: 0.6940000057220459",
            "SQLInjection: 0.6890000104904175",
            "SQLInjection: 0.6729999780654907",
            "PathTraversal: 0.6600000262260437",
            "XSS: 0.6600000262260437",
            "XSS: 0.6520000100135803",
            "PathTraversal: 0.640999972820282",
            "SQLInjection: 0.6389999985694885"
        ]
    },
    {
        "file_path": "mlflow\\genai\\scorers\\registry.py",
        "scope": "MlflowTrackingStore",
        "lineno": 183,
        "args": [],
        "summarize": "The class `MlflowTrackingStore` provides methods for managing scorer entities within an MLflow tracking store. \n\n- The constructor initializes the tracking store connection.\n- The `register_scorer` method registers a scorer with an experiment in the tracking store.\n- The `list_scorers` method retrieves a list of scorers associated with an experiment.\n- The `get_scorer` method retrieves a specific scorer by name and optionally by version.\n- The `list_scorer_versions` method lists all versions of a specific scorer associated with an experiment.\n- The `delete_scorer` method removes a scorer by name and version from the tracking store.",
        "potential_vul_types": [
            "XSS: 0.7260000109672546",
            "XSS: 0.7020000219345093",
            "SQLInjection: 0.6779999732971191",
            "SQLInjection: 0.6710000038146973",
            "XSS: 0.6639999747276306",
            "PathTraversal: 0.6489999890327454",
            "SQLInjection: 0.6460000276565552",
            "XSS: 0.6439999938011169"
        ]
    },
    {
        "file_path": "mlflow\\pyfunc\\scoring_server\\__init__.py",
        "scope": "init.transformation",
        "lineno": 504,
        "args": [
            "request"
        ],
        "summarize": "The function processes incoming POST requests by performing data inference on the provided input, which can be in CSV or JSON format, and returns the prediction results in JSON format.",
        "potential_vul_types": [
            "CommandInjection: 0.7850000262260437",
            "CodeInjection: 0.7680000066757202",
            "XSS: 0.765999972820282",
            "XSS: 0.7620000243186951",
            "CommandInjection: 0.7620000243186951",
            "SQLInjection: 0.7620000243186951",
            "XSS: 0.7599999904632568",
            "PathTraversal: 0.7509999871253967"
        ]
    },
    {
        "file_path": "mlflow\\server\\otel_api.py",
        "scope": "export_traces",
        "lineno": 42,
        "args": [
            "request",
            "response",
            "x_mlflow_experiment_id",
            "content_type"
        ],
        "summarize": "The function is an HTTP endpoint that processes and exports OpenTelemetry trace data to MLflow. It validates the request's content type, parses the trace data from the request body, converts it to MLflow-compatible spans, and logs them to a tracking store. It handles various errors related to data parsing and storage, responding with appropriate HTTP status codes.",
        "potential_vul_types": [
            "XSS: 0.7670000195503235",
            "PathTraversal: 0.7289999723434448",
            "CommandInjection: 0.7260000109672546",
            "SQLInjection: 0.7250000238418579",
            "SQLInjection: 0.7160000205039978",
            "XSS: 0.7070000171661377",
            "XSS: 0.7049999833106995",
            "SQLInjection: 0.7039999961853027"
        ]
    },
    {
        "file_path": "mlflow\\server\\__init__.py",
        "scope": "serve_get_logged_model_artifact",
        "lineno": 133,
        "args": [
            "model_id"
        ],
        "summarize": "The function serves as an endpoint to handle HTTP GET requests for retrieving artifacts associated with a logged machine learning model, identified by a model ID.",
        "potential_vul_types": [
            "PathTraversal: 0.6949999928474426",
            "XSS: 0.6850000023841858",
            "PathTraversal: 0.6809999942779541",
            "XSS: 0.6809999942779541",
            "XSS: 0.6769999861717224",
            "CommandInjection: 0.6769999861717224",
            "PathTraversal: 0.6759999990463257",
            "XSS: 0.6700000166893005"
        ]
    },
    {
        "file_path": "mlflow\\server\\handlers.py",
        "scope": "_graphql",
        "lineno": 2662,
        "args": [],
        "summarize": "The function processes a GraphQL request by extracting the query and related data from the incoming request, checking the query's safety, executing it using a predefined schema, and returning the execution result as a JSON response.",
        "potential_vul_types": [
            "CommandInjection: 0.75",
            "PathTraversal: 0.7369999885559082",
            "SQLInjection: 0.7369999885559082",
            "SQLInjection: 0.7289999723434448",
            "SQLInjection: 0.7279999852180481",
            "SQLInjection: 0.7279999852180481",
            "PathTraversal: 0.7279999852180481",
            "SQLInjection: 0.7269999980926514"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "create_user",
        "lineno": 994,
        "args": [],
        "summarize": "The function processes an HTTP request to create a new user, validating input data from a JSON payload and returning a response based on the operation's success or failure.",
        "potential_vul_types": [
            "XSS: 0.8539999723434448",
            "XSS: 0.8059999942779541",
            "PathTraversal: 0.7990000247955322",
            "XSS: 0.7879999876022339",
            "SQLInjection: 0.7789999842643738",
            "XSS: 0.7760000228881836",
            "SQLInjection: 0.7749999761581421",
            "PathTraversal: 0.7730000019073486"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "get_user",
        "lineno": 1012,
        "args": [],
        "summarize": "The function retrieves user information based on a username obtained from a request parameter and returns it in JSON format.",
        "potential_vul_types": [
            "XSS: 0.7710000276565552",
            "SQLInjection: 0.7400000095367432",
            "SQLInjection: 0.7329999804496765",
            "SQLInjection: 0.7269999980926514",
            "XSS: 0.7200000286102295",
            "SQLInjection: 0.718999981880188",
            "SQLInjection: 0.7170000076293945",
            "XSS: 0.7170000076293945"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "update_user_password",
        "lineno": 1019,
        "args": [],
        "summarize": "The function updates a user's password based on request data.",
        "potential_vul_types": [
            "XSS: 0.7549999952316284",
            "XSS: 0.7390000224113464",
            "CodeInjection: 0.7369999885559082",
            "XSS: 0.6970000267028809",
            "XSS: 0.6970000267028809",
            "SQLInjection: 0.6959999799728394",
            "PathTraversal: 0.6930000185966492",
            "SQLInjection: 0.6930000185966492"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "update_user_admin",
        "lineno": 1027,
        "args": [],
        "summarize": "The function updates the admin status of a user based on request parameters.",
        "potential_vul_types": [
            "CodeInjection: 0.7540000081062317",
            "XSS: 0.75",
            "SQLInjection: 0.7379999756813049",
            "SQLInjection: 0.7369999885559082",
            "SQLInjection: 0.7319999933242798",
            "XSS: 0.7300000190734863",
            "CommandInjection: 0.7279999852180481",
            "XSS: 0.7269999980926514"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "delete_user",
        "lineno": 1035,
        "args": [],
        "summarize": "The function processes a request to delete a user by obtaining the username from the request parameters and then calling a method to delete the user.",
        "potential_vul_types": [
            "SQLInjection: 0.7590000033378601",
            "SQLInjection: 0.7590000033378601",
            "PathTraversal: 0.7570000290870667",
            "XSS: 0.753000020980835",
            "PathTraversal: 0.753000020980835",
            "SQLInjection: 0.7269999980926514",
            "CodeInjection: 0.7250000238418579",
            "XSS: 0.718999981880188"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "create_experiment_permission",
        "lineno": 1042,
        "args": [],
        "summarize": "The function processes request parameters to create a permission for an experiment and returns the result as a JSON response.",
        "potential_vul_types": [
            "XSS: 0.8050000071525574",
            "CommandInjection: 0.7329999804496765",
            "PathTraversal: 0.7310000061988831",
            "PathTraversal: 0.7300000190734863",
            "XSS: 0.7239999771118164",
            "XSS: 0.7229999899864197",
            "SQLInjection: 0.722000002861023",
            "XSS: 0.7210000157356262"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "get_experiment_permission",
        "lineno": 1051,
        "args": [],
        "summarize": "The function retrieves and returns the permission level of a specified user for a given experiment, based on request parameters.",
        "potential_vul_types": [
            "XSS: 0.7080000042915344",
            "PathTraversal: 0.6850000023841858",
            "SQLInjection: 0.6779999732971191",
            "SQLInjection: 0.6759999990463257",
            "XSS: 0.6729999780654907",
            "PathTraversal: 0.6690000295639038",
            "XSS: 0.6669999957084656",
            "CommandInjection: 0.6660000085830688"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "update_experiment_permission",
        "lineno": 1059,
        "args": [],
        "summarize": "The function updates the permissions of an experiment based on request parameters and returns an empty response.",
        "potential_vul_types": [
            "XSS: 0.7570000290870667",
            "XSS: 0.7239999771118164",
            "PathTraversal: 0.7210000157356262",
            "SQLInjection: 0.7129999995231628",
            "XSS: 0.7110000252723694",
            "SQLInjection: 0.7089999914169312",
            "CommandInjection: 0.7020000219345093",
            "CommandInjection: 0.6970000267028809"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "delete_experiment_permission",
        "lineno": 1068,
        "args": [],
        "summarize": "The function deletes the permission for a specified experiment and user based on request parameters.",
        "potential_vul_types": [
            "PathTraversal: 0.7419999837875366",
            "SQLInjection: 0.7210000157356262",
            "SQLInjection: 0.7139999866485596",
            "PathTraversal: 0.7059999704360962",
            "XSS: 0.7049999833106995",
            "SQLInjection: 0.6880000233650208",
            "XSS: 0.6779999732971191",
            "PathTraversal: 0.6639999747276306"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "create_registered_model_permission",
        "lineno": 1076,
        "args": [],
        "summarize": "The function creates a permission entry for a registered model using request parameters and returns the result in JSON format.",
        "potential_vul_types": [
            "XSS: 0.722000002861023",
            "XSS: 0.6930000185966492",
            "XSS: 0.6859999895095825",
            "PathTraversal: 0.6800000071525574",
            "XSS: 0.6700000166893005",
            "XSS: 0.6700000166893005",
            "PathTraversal: 0.6690000295639038",
            "PathTraversal: 0.6660000085830688"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "get_registered_model_permission",
        "lineno": 1085,
        "args": [],
        "summarize": "The function retrieves and returns the permissions associated with a specified registered model for a given user.",
        "potential_vul_types": [
            "SQLInjection: 0.656000018119812",
            "XSS: 0.656000018119812",
            "SQLInjection: 0.6499999761581421",
            "XSS: 0.640999972820282",
            "PathTraversal: 0.6359999775886536",
            "SQLInjection: 0.6259999871253967",
            "PathTraversal: 0.6259999871253967",
            "SQLInjection: 0.625"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "update_registered_model_permission",
        "lineno": 1093,
        "args": [],
        "summarize": "The function updates the permissions for a registered model based on request parameters.",
        "potential_vul_types": [
            "PathTraversal: 0.6859999895095825",
            "XSS: 0.6800000071525574",
            "SQLInjection: 0.675000011920929",
            "XSS: 0.6740000247955322",
            "XSS: 0.6669999957084656",
            "SQLInjection: 0.6669999957084656",
            "XSS: 0.6570000052452087",
            "SQLInjection: 0.6549999713897705"
        ]
    },
    {
        "file_path": "mlflow\\server\\auth\\__init__.py",
        "scope": "delete_registered_model_permission",
        "lineno": 1102,
        "args": [],
        "summarize": "The function deletes a registered model's permission for a specified user based on request parameters.",
        "potential_vul_types": [
            "PathTraversal: 0.6909999847412109",
            "SQLInjection: 0.6800000071525574",
            "SQLInjection: 0.671999990940094",
            "PathTraversal: 0.656000018119812",
            "XSS: 0.6489999890327454",
            "SQLInjection: 0.6439999938011169",
            "SQLInjection: 0.6190000176429749",
            "XSS: 0.6169999837875366"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\local_artifact_repo.py",
        "scope": "LocalArtifactRepository",
        "lineno": 22,
        "args": [],
        "summarize": "The class `LocalArtifactRepository` manages and stores artifacts in a local directory. It provides methods to log single or multiple artifacts, download artifacts, list artifacts, and delete artifacts from the local filesystem. Additionally, it can download trace data as a dictionary.",
        "potential_vul_types": [
            "PathTraversal: 0.6890000104904175",
            "PathTraversal: 0.6539999842643738",
            "CommandInjection: 0.6330000162124634",
            "PathTraversal: 0.6259999871253967",
            "XSS: 0.6200000047683716",
            "PathTraversal: 0.6169999837875366",
            "PathTraversal: 0.6140000224113464",
            "PathTraversal: 0.6129999756813049"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\s3_artifact_repo.py",
        "scope": "S3ArtifactRepository",
        "lineno": 137,
        "args": [],
        "summarize": "The class `S3ArtifactRepository` manages the storage of artifacts in Amazon S3. It provides methods for initializing the repository with AWS credentials and S3 URI, parsing S3-compliant URIs, handling additional S3 upload arguments from environment variables, uploading files and directories to S3, listing artifacts in S3, downloading files from S3, deleting artifacts, and managing multipart uploads including creation, completion, and abortion. The class utilizes boto3 for S3 operations and supports various authentication methods.",
        "potential_vul_types": [
            "PathTraversal: 0.6970000267028809",
            "CommandInjection: 0.6710000038146973",
            "XSS: 0.6690000295639038",
            "PathTraversal: 0.6690000295639038",
            "XSS: 0.6639999747276306",
            "PathTraversal: 0.6620000004768372",
            "SQLInjection: 0.6579999923706055",
            "SQLInjection: 0.6549999713897705"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\gcs_artifact_repo.py",
        "scope": "GCSArtifactRepository",
        "lineno": 36,
        "args": [],
        "summarize": "The `GCSArtifactRepository` class manages artifacts stored in Google Cloud Storage. It initializes with a URI and client configuration, and can handle credential refreshing. The class provides methods to parse GCS URIs, retrieve GCS buckets, and log single or multiple artifacts to GCS. It lists artifacts, downloads files, and deletes artifacts from GCS. The class also supports multipart uploads, including creating, completing, and aborting them, while validating support for multipart uploads based on library versions.",
        "potential_vul_types": [
            "CommandInjection: 0.6809999942779541",
            "CommandInjection: 0.6690000295639038",
            "XSS: 0.6589999794960022",
            "PathTraversal: 0.6589999794960022",
            "PathTraversal: 0.6579999923706055",
            "CommandInjection: 0.6460000276565552",
            "PathTraversal: 0.6460000276565552",
            "PathTraversal: 0.6430000066757202"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\azure_blob_artifact_repo.py",
        "scope": "AzureBlobArtifactRepository",
        "lineno": 32,
        "args": [],
        "summarize": "The class `AzureBlobArtifactRepository` is designed for managing artifacts in Azure Blob Storage. It initializes a connection to the Azure Blob Storage service using credentials from environment variables or default credentials. It includes methods to:\n\n- Parse Azure Blob Storage URIs.\n- Upload single or multiple files to the specified storage container.\n- List artifacts stored in the container, identifying directories and files.\n- Download files from the storage container.\n- Delete artifacts from the storage container.\n- Handle multipart uploads by creating, completing, and aborting uploads.",
        "potential_vul_types": [
            "PathTraversal: 0.6830000281333923",
            "XSS: 0.6819999814033508",
            "PathTraversal: 0.6800000071525574",
            "PathTraversal: 0.675000011920929",
            "CommandInjection: 0.6690000295639038",
            "PathTraversal: 0.6690000295639038",
            "XSS: 0.6669999957084656",
            "PathTraversal: 0.6579999923706055"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\ftp_artifact_repo.py",
        "scope": "FTPArtifactRepository",
        "lineno": 15,
        "args": [],
        "summarize": "The class `FTPArtifactRepository` manages file storage and retrieval using FTP. \n\n- The constructor initializes the repository with connection details parsed from a URI.\n- `get_ftp_client` manages FTP connection setup and teardown.\n- `_is_dir` checks if a given path is a directory on the FTP server.\n- `_mkdir` creates directories on the FTP server, handling nested paths.\n- `_size` retrieves the size of a file on the FTP server.\n- `log_artifact` uploads a single file to a specified path on the FTP server.\n- `log_artifacts` uploads all files from a local directory to a specified path on the FTP server, creating directories as needed.\n- `_is_directory` checks if a given path is a directory on the FTP server.\n- `list_artifacts` lists files and directories at a specified path on the FTP server, returning metadata about each.\n- `_download_file` downloads a file from the FTP server to a local path.\n- `delete_artifacts` is not implemented and raises an exception when called.",
        "potential_vul_types": [
            "PathTraversal: 0.7020000219345093",
            "PathTraversal: 0.6690000295639038",
            "SQLInjection: 0.6679999828338623",
            "PathTraversal: 0.6600000262260437",
            "PathTraversal: 0.656000018119812",
            "SQLInjection: 0.6539999842643738",
            "XSS: 0.6539999842643738",
            "XSS: 0.6539999842643738"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\sftp_artifact_repo.py",
        "scope": "SFTPArtifactRepository",
        "lineno": 39,
        "args": [],
        "summarize": "The class `SFTPArtifactRepository` manages the storage and retrieval of artifacts using SFTP in a remote directory. \n\n- The constructor initializes the repository with connection details parsed from the provided URI and configures an SFTP connection pool.\n- `log_artifact` uploads a local file to a specified path in the remote directory.\n- `log_artifacts` uploads all files from a local directory to a specified path in the remote directory.\n- `_is_directory` checks if a specified path in the remote directory is a directory.\n- `list_artifacts` lists files and directories at a specified path in the remote directory, returning metadata for each item.\n- `_download_file` downloads a file from a specified path in the remote directory to a local path.\n- `delete_artifacts` deletes files and directories at a specified path in the remote directory.\n- `_delete_inner` recursively deletes contents of a directory or a single file at a specified path in the remote directory.",
        "potential_vul_types": [
            "PathTraversal: 0.699999988079071",
            "PathTraversal: 0.671999990940094",
            "SQLInjection: 0.671999990940094",
            "PathTraversal: 0.6650000214576721",
            "CommandInjection: 0.6589999794960022",
            "SQLInjection: 0.6570000052452087",
            "PathTraversal: 0.656000018119812",
            "SQLInjection: 0.6539999842643738"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\hdfs_artifact_repo.py",
        "scope": "HdfsArtifactRepository",
        "lineno": 21,
        "args": [],
        "summarize": "The class `HdfsArtifactRepository` manages storage and retrieval of artifacts in an HDFS system. \n\n- The constructor initializes the repository with a specified URI, resolving connection parameters.\n- The `log_artifact` method uploads a single local file to HDFS, possibly under a specified path.\n- The `log_artifacts` method uploads all files from a local directory to HDFS, creating necessary directories.\n- The `list_artifacts` method retrieves a list of files and directories under a specified path in HDFS.\n- The `_is_directory` method checks if a specified path in HDFS is a directory.\n- The `_download_file` method downloads a file from HDFS to a local path.\n- The `delete_artifacts` method removes a file or directory from HDFS, including all contents if it's a directory.",
        "potential_vul_types": [
            "PathTraversal: 0.6779999732971191",
            "PathTraversal: 0.6779999732971191",
            "PathTraversal: 0.675000011920929",
            "PathTraversal: 0.6620000004768372",
            "XSS: 0.6539999842643738",
            "SQLInjection: 0.6520000100135803",
            "XSS: 0.6489999890327454",
            "PathTraversal: 0.6480000019073486"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\runs_artifact_repo.py",
        "scope": "RunsArtifactRepository",
        "lineno": 21,
        "args": [],
        "summarize": "The class manages and interacts with artifacts associated with a run. It resolves artifact paths, logs artifacts, lists artifacts, and downloads or deletes artifacts. Additionally, it handles associated models and their artifacts, ensuring that model artifacts can be listed and downloaded as well.",
        "potential_vul_types": [
            "PathTraversal: 0.6919999718666077",
            "XSS: 0.6850000023841858",
            "PathTraversal: 0.6800000071525574",
            "CommandInjection: 0.6700000166893005",
            "SQLInjection: 0.6669999957084656",
            "PathTraversal: 0.6639999747276306",
            "CommandInjection: 0.656000018119812",
            "XSS: 0.6539999842643738"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\azure_data_lake_artifact_repo.py",
        "scope": "AzureDataLakeArtifactRepository",
        "lineno": 69,
        "args": [],
        "summarize": "The class `AzureDataLakeArtifactRepository` manages artifacts in Azure Data Lake Storage Gen2. It initializes with storage credentials, either provided or retrieved from the environment, and parses them to set up connections to the Azure Data Lake. The class includes methods to refresh credentials, log artifacts by uploading files to the storage, list stored artifacts, download files from the storage, and manage multipart uploads for large files. It also provides functionality to retrieve presigned URLs for file operations. However, it does not support deleting artifacts.",
        "potential_vul_types": [
            "PathTraversal: 0.6499999761581421",
            "SQLInjection: 0.6460000276565552",
            "PathTraversal: 0.640999972820282",
            "CommandInjection: 0.6389999985694885",
            "CommandInjection: 0.6370000243186951",
            "PathTraversal: 0.6370000243186951",
            "XSS: 0.6359999775886536",
            "PathTraversal: 0.6340000033378601"
        ]
    },
    {
        "file_path": "mlflow\\store\\artifact\\http_artifact_repo.py",
        "scope": "HttpArtifactRepository",
        "lineno": 35,
        "args": [],
        "summarize": "This class facilitates the storage and management of artifacts in a remote storage system using HTTP requests. It includes methods for logging single or multiple artifacts, listing artifacts, downloading files, and deleting artifacts. The class also supports multipart uploads for large files and provides methods to create, complete, and abort multipart uploads. Additionally, it includes functionality to upload individual parts of a file in a multipart upload process.",
        "potential_vul_types": [
            "PathTraversal: 0.7580000162124634",
            "XSS: 0.7490000128746033",
            "PathTraversal: 0.7480000257492065",
            "XSS: 0.7170000076293945",
            "PathTraversal: 0.7139999866485596",
            "XSS: 0.7080000042915344",
            "PathTraversal: 0.7080000042915344",
            "XSS: 0.703000009059906"
        ]
    },
    {
        "file_path": "mlflow\\store\\_unity_catalog\\registry\\rest_store.py",
        "scope": "UcModelRegistryStore",
        "lineno": 359,
        "args": [],
        "summarize": "The `UcModelRegistryStore` class provides a client interface for interacting with a remote model registry server through REST API calls. It enables operations related to model and prompt management within a Databricks environment, specifically utilizing Unity Catalog. The class includes methods for creating, updating, renaming, deleting, and searching registered models and their versions. It also allows setting and deleting tags for models and model versions, and handles the creation and management of prompts and their versions. Additionally, it supports linking prompts to models, traces, and runs, facilitating comprehensive model and prompt lifecycle management in a cloud-based ML environment.",
        "potential_vul_types": [
            "SQLInjection: 0.6909999847412109",
            "XSS: 0.6779999732971191",
            "SQLInjection: 0.6639999747276306",
            "XSS: 0.6570000052452087",
            "XSS: 0.640999972820282",
            "PathTraversal: 0.6389999985694885",
            "SQLInjection: 0.6380000114440918",
            "SQLInjection: 0.6359999775886536"
        ]
    },
    {
        "file_path": "mlflow\\store\\_unity_catalog\\registry\\uc_oss_rest_store.py",
        "scope": "UnityCatalogOssStore",
        "lineno": 72,
        "args": [],
        "summarize": "The class `UnityCatalogOssStore` is a client for interacting with an Open Source Unity Catalog Server via REST API calls. It provides functionalities to manage registered models and their versions, including creating, updating, deleting, searching, and retrieving models and model versions. It also handles operations related to model version credentials and downloading model artifacts. The class includes methods for creating and updating registered models and model versions, searching for models and versions, and obtaining model version download URIs. Additionally, it supports generating temporary credentials for model version operations and manages local directories for model files. Some methods are not implemented, such as renaming registered models and managing tags or aliases.",
        "potential_vul_types": [
            "PathTraversal: 0.6470000147819519",
            "XSS: 0.6460000276565552",
            "CommandInjection: 0.6389999985694885",
            "XSS: 0.6370000243186951",
            "SQLInjection: 0.6340000033378601",
            "Deserialization: 0.6340000033378601",
            "PathTraversal: 0.6340000033378601",
            "SQLInjection: 0.6330000162124634"
        ]
    }
]