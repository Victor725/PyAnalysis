[
    {
        "file_path": "79_DS-10_fix.py",
        "scope": "ReportResource",
        "lineno": 31,
        "args": [],
        "summarize": "User Input Sources:  \n- `on_get`: Takes `report_id` as an input, which could originate from a user via an HTTP GET request parameter.  \n- `on_post`: Reads data from `req.stream`, which is the request body of an HTTP POST request, and decodes it as JSON. The data can include user-provided fields such as `title`, `content`, and optionally `author`.\n\nMain Functionality:  \n- `on_get`: The method retrieves a specific report by its `report_id` if provided. If the report exists, it renders the report's details into an HTML format while properly escaping HTML content to prevent injection attacks. If the report does not exist, it sets the response status to 404 (Not Found). If no `report_id` is provided, it retrieves and returns all reports.\n- `on_post`: This method handles the creation of a new report. It reads and parses JSON data from the request body, then creates a new report using the provided `title`, `content`, and optionally `author`. The method returns the newly created report's ID.\n\nOutputs / Return Values:  \n- `on_get`: Outputs an HTML page containing the report's details when a valid `report_id` is provided and the report exists. If no `report_id` is provided, it returns a JSON object containing all reports. Returns a 404 status if the report does not exist.\n- `on_post`: Returns a JSON object with the ID of the newly created report. If an error occurs, it raises an HTTPBadRequest with an error message.",
        "potential_vul_types": [
            "XSS",
            "CodeInjection",
            "CommandInjection"
        ]
    },
    {
        "file_path": "79_DS-10_fix.py",
        "scope": "ReportFormResource",
        "lineno": 87,
        "args": [],
        "summarize": "User Input Sources:  \n- The class does not directly take user input within the `on_get` method. However, the HTML form generated by this method allows users to input data into fields for \"title\", \"content\", and \"author\". This input is collected through a client-side script when the form is submitted.\n- The user input is then sent to the server via a POST request to the `/reports` endpoint, where it is expected to be processed by another part of the application.\n\nMain Functionality:  \n- The primary purpose of the `on_get` method in the `ReportFormResource` class is to serve an HTML page to the client. This page includes a form for creating a new report with fields for the report's title, content, and author.\n- The page also includes a JavaScript script that handles form submission. When the form is submitted, the script prevents the default form submission behavior, collects the input data, and sends it as a JSON object in a POST request to the `/reports` endpoint.\n- After submitting the data, the script updates the page with a link to view the newly created report, using the report ID returned in the response.\n\nOutputs / Return Values:  \n- The `on_get` method returns an HTML page containing a form and client-side JavaScript for handling the form submission. The HTML is served as a response to the client's GET request.\n- The JavaScript embedded in the HTML page produces an update to the DOM, displaying a confirmation message and a link to the newly created report after the POST request is successfully processed by the server.",
        "potential_vul_types": [
            "XSS",
            "CodeInjection"
        ]
    }
]