@security.requires_access_dag("GET", DagAccessEntity.XCOM)
@provide_session
def get_xcom_entry(
    *,
    dag_id: str,
    task_id: str,
    dag_run_id: str,
    xcom_key: str,
    map_index: int = -1,
    deserialize: bool = False,
    session: Session = NEW_SESSION,
) -> APIResponse:
    """Get an XCom entry."""
    if deserialize:
        if not conf.getboolean("api", "enable_xcom_deserialize_support", fallback=False):
            raise BadRequest(detail="XCom deserialization is disabled in configuration.")
        query = select(XCom, XCom.value)
    else:
        query = select(XCom)

    query = query.where(
        XCom.dag_id == dag_id, XCom.task_id == task_id, XCom.key == xcom_key, XCom.map_index == map_index
    )
    query = query.join(DR, and_(XCom.dag_id == DR.dag_id, XCom.run_id == DR.run_id))
    query = query.where(DR.run_id == dag_run_id)

    if deserialize:
        item = session.execute(query).one_or_none()
    else:
        item = session.scalars(query).one_or_none()

    if item is None:
        raise NotFound("XCom entry not found")

    if deserialize:
        xcom, value = item
        stub = copy.copy(xcom)
        stub.value = value
        stub.value = XCom.deserialize_value(stub)
        item = stub

    return xcom_schema.dump(item)