@router.post("/upload-to-local-directory")
async def upload_to_docker_directory(
    upload_name: str = Form(
        default_factory=lambda: str(uuid.uuid4()), regex=r"^[a-z][a-z0-9-]*$"
    ),
    files: List[UploadFile] = File(...),
):
    """This function uploads files within `settings.LOCAL_DATA_DIRECTORY` given by the name req.upload_name"""
    if not settings.LOCAL:
        return JSONResponse(
            content={"error": "API only supported for local docker environment"},
            status_code=500,
        )
    logger.info(f"Uploading files to directory: {upload_name}")
    # create a folder within `/volumes/user_data/` that maps to `/app/user_data/` in the docker volume
    # this folder will be used to store the uploaded files
    folder_path = os.path.join(settings.LOCAL_DATA_DIRECTORY, upload_name)

    # Create the folder if it does not exist, else raise an exception
    if os.path.exists(folder_path):
        return JSONResponse(
            content={"error": f"Folder already exists: {upload_name}"},
            status_code=500,
        )

    # Create the folder by the given name
    os.makedirs(folder_path)

    # Upload the files to the folder
    for file in files:
        logger.info(f"Copying file: {file.filename}, to folder: {folder_path}")
        file_path = os.path.join(folder_path, file.filename)
        with open(file_path, "wb") as f:
            f.write(file.file.read())

    # Add the data source to the metadata store.
    return await add_data_source(
        CreateDataSource(
            type="localdir",
            uri=folder_path,
        )
    )