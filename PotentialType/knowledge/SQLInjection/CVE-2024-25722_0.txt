User Input Sources:  
The function takes input from an HTTP request object `req`. It extracts several parameters that could originate from the user:  
- `user_id`: Retrieved using `safe_get(req, 'user_id')`.
- `kb_id`: Retrieved using `safe_get(req, 'kb_id')`.
- `url`: Retrieved using `safe_get(req, 'url')`.
- `mode`: Retrieved using `safe_get(req, 'mode', default='soft')`, with a default value of 'soft' if not provided.

Main Functionality:  
The function `upload_weblink` is designed to handle the upload of a web link to a knowledge base. It first validates the `user_id`. If the user ID is invalid, it returns an error message. It then checks if the provided `kb_id` exists for the user. If the knowledge base ID is invalid, it returns an error message. Depending on the `mode` parameter, it checks for the existence of a file with the same name. If `mode` is 'soft' and a file with the same name exists, it returns a warning message. If no such file exists, or if `mode` is 'strong', it adds the file to the knowledge base and initiates an asynchronous task to insert the file into a database (presumably Milvus). It returns a success message indicating that the upload is in progress.

Outputs / Return Values:  
The function returns a JSON object using `sanic_json`. The JSON object contains:
- `code`: An integer indicating the status of the operation (e.g., 200 for success, 2001 for invalid `kb_id`, 2005 for invalid `user_id`).
- `msg`: A message string providing information about the operation's outcome (e.g., success, warning, or error messages).
- `data`: A list of dictionaries, each containing details about the file, such as `file_id`, `file_name`, `status`, `bytes`, and `timestamp`.