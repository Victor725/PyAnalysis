User Input Sources:  
- The function takes user input through the `req` parameter, which is expected to be a request object.  
- It extracts `user_id`, `kb_id`, `mode`, and `use_local_file` from the request using the `safe_get` function, which suggests these could originate from HTTP request parameters.  
- The `files` are obtained from the request's file list or read locally based on the `use_local_file` parameter.

Main Functionality:  
- The function's primary purpose is to handle file uploads, associating them with a user and a knowledge base (`kb_id`).  
- It validates the `user_id` and checks if the `kb_id` exists in the system.  
- Depending on the `mode` parameter, it decides whether to overwrite files with the same name (`soft` mode avoids overwriting, while `strong` mode allows it).  
- It processes the file names by cleaning and truncating them, checks for existing files with the same names, and then uploads non-existing files to a system (possibly a database or a file storage service).  
- The function also logs various steps for debugging purposes and asynchronously inserts files into a system called Milvus.

Outputs / Return Values:  
- The function returns a JSON response using `sanic_json`.  
- The JSON object contains a status code (`code`), a message (`msg`), and a list of data related to the uploaded files, including `file_id`, `file_name`, `status`, `bytes`, and `timestamp`.  
- The message indicates the success or failure of the operation and may include warnings if the `soft` mode prevents file uploads.